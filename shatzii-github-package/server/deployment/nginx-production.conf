# Nginx Production Configuration for shatzii.com
# Optimized for VPS server 5.161.99.81

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;

# Upstream backend
upstream shatzii_backend {
    least_conn;
    server 127.0.0.1:5000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Main server block
server {
    listen 80;
    listen [::]:80;
    server_name shatzii.com www.shatzii.com 5.161.99.81;
    
    # Redirect to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name shatzii.com www.shatzii.com;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/shatzii.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/shatzii.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/shatzii.com/chain.pem;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss://shatzii.com ws://shatzii.com; frame-ancestors 'self';" always;
    
    # Root directory
    root /home/shatzii/shatzii-platform/dist;
    index index.html;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        image/svg+xml;
    
    # Browser caching
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Serve from backend if not found locally
        try_files $uri @backend;
    }
    
    # API routes with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://shatzii_backend;
        include /etc/nginx/proxy_params;
        
        # API specific headers
        proxy_set_header Accept-Encoding "";
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Authentication endpoints with strict rate limiting
    location ~ ^/api/auth/(login|register)$ {
        limit_req zone=auth burst=3 nodelay;
        proxy_pass http://shatzii_backend;
        include /etc/nginx/proxy_params;
        
        # Enhanced security for auth
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
    }
    
    # File upload endpoints
    location ~ ^/api/(upload|files)/ {
        limit_req zone=upload burst=5 nodelay;
        client_max_body_size 10M;
        proxy_pass http://shatzii_backend;
        include /etc/nginx/proxy_params;
        
        # Upload timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
    
    # WebSocket support for real-time features
    location /ws/ {
        proxy_pass http://shatzii_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # WebSocket timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 3600s;
    }
    
    # Health check endpoint
    location = /health {
        access_log off;
        proxy_pass http://shatzii_backend;
        proxy_set_header Host $host;
    }
    
    # Admin monitoring (restrict access)
    location /admin/ {
        allow 5.161.99.81;
        allow 127.0.0.1;
        deny all;
        
        proxy_pass http://shatzii_backend;
        include /etc/nginx/proxy_params;
    }
    
    # Serve frontend application
    location / {
        try_files $uri $uri/ @backend;
        
        # Cache HTML files for short time
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }
    }
    
    # Backend fallback
    location @backend {
        proxy_pass http://shatzii_backend;
        include /etc/nginx/proxy_params;
        
        # Standard timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(sql|log|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Logging
    access_log /var/log/nginx/shatzii_access.log combined;
    error_log /var/log/nginx/shatzii_error.log warn;
}

# Redirect www to non-www
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.shatzii.com;
    
    ssl_certificate /etc/letsencrypt/live/shatzii.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/shatzii.com/privkey.pem;
    
    return 301 https://shatzii.com$request_uri;
}