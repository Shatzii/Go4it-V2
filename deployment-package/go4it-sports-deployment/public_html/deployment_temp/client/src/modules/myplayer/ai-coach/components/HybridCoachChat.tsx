import React, { useState } from 'react';
import { useHybridCoach } from '../hooks/useHybridCoach';
import { 
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Avatar } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  LucideMessageSquare, 
  LucideSend, 
  LucideDumbbell, 
  LucideVideo, 
  LucideRefreshCw, 
  LucideUserCog 
} from 'lucide-react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { TrainingAdviceRequest, VideoFeedbackRequest } from '../services/hybridCoachService';

interface Message {
  role: 'user' | 'assistant';
  content: string;
  source?: 'claude' | 'gpt';
}

export function HybridCoachChat() {
  const { 
    sendMessageAsync, 
    isChatLoading,
    messageHistory,
    resetChat,
    getTrainingAdviceAsync,
    isTrainingAdviceLoading,
    getVideoFeedbackAsync,
    isVideoFeedbackLoading
  } = useHybridCoach();
  
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState<Message[]>([
    { role: 'assistant', content: "Hi, I'm your Go4It Sports AI Coach. I can help with technique advice, training plans, or analyzing your performance. How can I help you today?" }
  ]);
  const [modelPreference, setModelPreference] = useState<'claude' | 'gpt' | 'auto'>('auto');
  
  // Training advice form state
  const [trainingAdvice, setTrainingAdvice] = useState<TrainingAdviceRequest>({
    sport: '',
    skillLevel: 'intermediate',
    focusArea: ''
  });
  
  // Video feedback form state
  const [videoFeedback, setVideoFeedback] = useState<VideoFeedbackRequest>({
    sportType: '',
    videoDescription: ''
  });
  
  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;
    
    // Add user message to chat
    const userMessage = { role: 'user' as const, content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    
    try {
      // Send message to API
      const response = await sendMessageAsync({
        message: input,
        modelPreference
      });
      
      // Add response to chat
      setMessages(prev => [
        ...prev, 
        { 
          role: 'assistant', 
          content: response.message,
          source: response.source
        }
      ]);
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => [
        ...prev,
        {
          role: 'assistant',
          content: "I'm sorry, I encountered an error processing your request. Please try again."
        }
      ]);
    }
  };
  
  const handleTrainingAdviceSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      // Get training advice
      const response = await getTrainingAdviceAsync(trainingAdvice);
      
      // Format advice message
      const adviceMessage = `
        **Training Advice for ${trainingAdvice.sport} - ${trainingAdvice.focusArea}**
        
        ${response.advice}
        
        **Recommended Drills:**
        ${response.drills.map(drill => 
          `- **${drill.name}**: ${drill.description} (${drill.duration})`
        ).join('\n')}
        
        ${response.source === 'claude' ? 'Generated by Claude AI' : 'Generated by GPT AI'}
      `;
      
      // Add to messages
      setMessages(prev => [
        ...prev,
        { role: 'user', content: `I need training advice for ${trainingAdvice.sport} focusing on ${trainingAdvice.focusArea} at ${trainingAdvice.skillLevel} level.` },
        { role: 'assistant', content: adviceMessage, source: response.source }
      ]);
    } catch (error) {
      console.error('Error getting training advice:', error);
      setMessages(prev => [
        ...prev,
        { role: 'user', content: `I need training advice for ${trainingAdvice.sport} focusing on ${trainingAdvice.focusArea}.` },
        { role: 'assistant', content: "I'm sorry, I encountered an error generating training advice. Please try again." }
      ]);
    }
  };
  
  const handleVideoFeedbackSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      // Get video feedback
      const response = await getVideoFeedbackAsync(videoFeedback);
      
      // Format feedback message
      const feedbackMessage = `
        **Video Analysis - ${videoFeedback.sportType}**
        
        **Overall Assessment:**
        ${response.feedback.overallAssessment}
        
        **Technical Analysis:**
        ${response.feedback.technicalAnalysis}
        
        **Strengths:**
        ${response.feedback.strengths.map(s => `- ${s}`).join('\n')}
        
        **Areas for Improvement:**
        ${response.feedback.improvementAreas.map(a => `- ${a}`).join('\n')}
        
        **ADHD Considerations:**
        ${response.feedback.adhdConsiderations}
        
        **Next Steps:**
        ${response.feedback.nextSteps}
        
        ${response.source === 'claude' ? 'Generated by Claude AI' : 'Generated by GPT AI'}
      `;
      
      // Add to messages
      setMessages(prev => [
        ...prev,
        { role: 'user', content: `Can you analyze my ${videoFeedback.sportType} performance? ${videoFeedback.videoDescription}` },
        { role: 'assistant', content: feedbackMessage, source: response.source }
      ]);
    } catch (error) {
      console.error('Error getting video feedback:', error);
      setMessages(prev => [
        ...prev,
        { role: 'user', content: `Can you analyze my ${videoFeedback.sportType} performance? ${videoFeedback.videoDescription}` },
        { role: 'assistant', content: "I'm sorry, I encountered an error analyzing your video. Please try again." }
      ]);
    }
  };
  
  const handleReset = () => {
    resetChat();
    setMessages([
      { role: 'assistant', content: "Hi, I'm your Go4It Sports AI Coach. I can help with technique advice, training plans, or analyzing your performance. How can I help you today?" }
    ]);
  };
  
  return (
    <Card className="w-full max-w-3xl mx-auto">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Avatar className="h-8 w-8 bg-primary">
              <LucideUserCog className="h-4 w-4 text-white" />
            </Avatar>
            <div>
              <CardTitle>Hybrid AI Coach</CardTitle>
              <CardDescription>Get personalized coaching with advanced AI</CardDescription>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <select 
              value={modelPreference}
              onChange={(e) => setModelPreference(e.target.value as any)}
              className="text-xs rounded border p-1"
            >
              <option value="auto">Auto Select</option>
              <option value="claude">Prefer Claude</option>
              <option value="gpt">Prefer GPT</option>
            </select>
            <Button variant="outline" size="sm" onClick={handleReset}>
              <LucideRefreshCw className="h-4 w-4 mr-1" /> Reset
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <Tabs defaultValue="chat">
        <TabsList className="grid grid-cols-3 mx-4">
          <TabsTrigger value="chat">
            <LucideMessageSquare className="h-4 w-4 mr-1" /> Chat
          </TabsTrigger>
          <TabsTrigger value="training">
            <LucideDumbbell className="h-4 w-4 mr-1" /> Training
          </TabsTrigger>
          <TabsTrigger value="video">
            <LucideVideo className="h-4 w-4 mr-1" /> Video Analysis
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="chat">
          <CardContent>
            <ScrollArea className="h-[400px] pr-4">
              <div className="space-y-4">
                {messages.map((message, i) => (
                  <div 
                    key={i}
                    className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div 
                      className={`max-w-[80%] rounded-lg p-3 ${
                        message.role === 'user' 
                          ? 'bg-primary text-primary-foreground' 
                          : 'bg-muted'
                      }`}
                    >
                      <div className="whitespace-pre-wrap">{message.content}</div>
                      {message.source && (
                        <Badge 
                          variant="outline" 
                          className={`mt-1 text-xs ${
                            message.source === 'claude' ? 'border-violet-300' : 'border-emerald-300'
                          }`}
                        >
                          {message.source === 'claude' ? 'Claude' : 'GPT'}
                        </Badge>
                      )}
                    </div>
                  </div>
                ))}
                {isChatLoading && (
                  <div className="flex justify-start">
                    <div className="max-w-[80%] rounded-lg p-3 bg-muted">
                      <div className="flex items-center space-x-2">
                        <div className="animate-pulse h-2 w-2 bg-zinc-500 rounded-full"></div>
                        <div className="animate-pulse h-2 w-2 bg-zinc-500 rounded-full animation-delay-200"></div>
                        <div className="animate-pulse h-2 w-2 bg-zinc-500 rounded-full animation-delay-400"></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>
          </CardContent>
          
          <CardFooter>
            <form onSubmit={handleSendMessage} className="flex w-full space-x-2">
              <Input
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Ask your coach a question..."
                className="flex-1"
                disabled={isChatLoading}
              />
              <Button type="submit" disabled={isChatLoading || !input.trim()}>
                <LucideSend className="h-4 w-4 mr-1" /> Send
              </Button>
            </form>
          </CardFooter>
        </TabsContent>
        
        <TabsContent value="training">
          <CardContent>
            <form onSubmit={handleTrainingAdviceSubmit} className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="sport" className="text-sm font-medium">Sport</label>
                <Input
                  id="sport"
                  value={trainingAdvice.sport}
                  onChange={(e) => setTrainingAdvice(prev => ({ ...prev, sport: e.target.value }))}
                  placeholder="e.g., Basketball, Football, Soccer"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <label htmlFor="skillLevel" className="text-sm font-medium">Skill Level</label>
                <select 
                  id="skillLevel"
                  value={trainingAdvice.skillLevel}
                  onChange={(e) => setTrainingAdvice(prev => ({ 
                    ...prev, 
                    skillLevel: e.target.value as 'beginner' | 'intermediate' | 'advanced' | 'elite'
                  }))}
                  className="w-full rounded-md border border-input px-3 py-2 text-sm"
                  required
                >
                  <option value="beginner">Beginner</option>
                  <option value="intermediate">Intermediate</option>
                  <option value="advanced">Advanced</option>
                  <option value="elite">Elite</option>
                </select>
              </div>
              
              <div className="space-y-2">
                <label htmlFor="focusArea" className="text-sm font-medium">Focus Area</label>
                <Input
                  id="focusArea"
                  value={trainingAdvice.focusArea}
                  onChange={(e) => setTrainingAdvice(prev => ({ ...prev, focusArea: e.target.value }))}
                  placeholder="e.g., Shooting, Endurance, Footwork"
                  required
                />
              </div>
              
              <Button type="submit" className="w-full" disabled={isTrainingAdviceLoading}>
                {isTrainingAdviceLoading ? "Generating Plan..." : "Get Training Plan"}
              </Button>
            </form>
          </CardContent>
        </TabsContent>
        
        <TabsContent value="video">
          <CardContent>
            <form onSubmit={handleVideoFeedbackSubmit} className="space-y-4">
              <div className="space-y-2">
                <label htmlFor="sportType" className="text-sm font-medium">Sport Type</label>
                <Input
                  id="sportType"
                  value={videoFeedback.sportType}
                  onChange={(e) => setVideoFeedback(prev => ({ ...prev, sportType: e.target.value }))}
                  placeholder="e.g., Basketball, Football, Soccer"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <label htmlFor="videoDescription" className="text-sm font-medium">Video Description</label>
                <Textarea
                  id="videoDescription"
                  value={videoFeedback.videoDescription}
                  onChange={(e) => setVideoFeedback(prev => ({ ...prev, videoDescription: e.target.value }))}
                  placeholder="Please describe what happens in the video, focusing on your technique, movements, and the context of the activity..."
                  rows={4}
                  required
                />
              </div>
              
              <Button type="submit" className="w-full" disabled={isVideoFeedbackLoading}>
                {isVideoFeedbackLoading ? "Analyzing Video..." : "Get Video Analysis"}
              </Button>
            </form>
          </CardContent>
        </TabsContent>
      </Tabs>
    </Card>
  );
}