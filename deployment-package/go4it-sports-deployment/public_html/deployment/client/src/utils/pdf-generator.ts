import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { User } from '@shared/schema';
import { formatDate } from './date-formatter';

// Add the autotable plugin to the jsPDF type
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

/**
 * Generate an athlete report PDF with performance data, GAR scores, and recommendations
 */
export const generateAthletePDF = async (
  user: User,
  profileData: any,
  garScores: any,
  highlights: any[],
  recommendations: any[] = []
): Promise<Blob> => {
  // Create new PDF document
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Add Go4It logo/header
  // Note: In production, replace with actual logo path
  const logoHeight = 20;
  doc.setFillColor(13, 22, 40); // Dark blue background
  doc.rect(0, 0, pageWidth, 40, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(22);
  doc.text('Go4It Sports', pageWidth / 2, 20, { align: 'center' });
  doc.setFontSize(12);
  doc.text('Athlete Performance Report', pageWidth / 2, 30, { align: 'center' });
  
  // Reset text color for the rest of the document
  doc.setTextColor(0, 0, 0);
  
  // Add report generation date
  const today = new Date();
  doc.setFontSize(10);
  doc.text(`Report generated on ${formatDate(today)}`, pageWidth - 15, 45, { align: 'right' });
  
  // Athlete Information Section
  doc.setFontSize(16);
  doc.text('Athlete Information', 14, 60);
  doc.setFontSize(12);
  
  const athleteInfo = [
    ['Name', user.name || 'N/A'],
    ['Sport', profileData?.sportsInterest?.[0] || 'N/A'],
    ['Position', profileData?.position || 'N/A'],
    ['School', profileData?.school || 'N/A'],
    ['Graduation Year', profileData?.graduationYear?.toString() || 'N/A'],
    ['Height', profileData?.height || 'N/A'],
    ['Weight', profileData?.weight || 'N/A']
  ];
  
  doc.autoTable({
    startY: 65,
    head: [['Attribute', 'Value']],
    body: athleteInfo,
    theme: 'grid',
    headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
    styles: { fontSize: 10 }
  });
  
  // GAR Scores Section
  doc.setFontSize(16);
  doc.text('GAR Performance Scores', 14, doc.autoTable.previous.finalY + 15);
  
  if (garScores && Object.keys(garScores).length > 0) {
    const garData = Object.entries(garScores).map(([category, score]) => [
      category, 
      typeof score === 'number' ? score.toFixed(1) : 'N/A'
    ]);
    
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Category', 'Score (0-100)']],
      body: garData,
      theme: 'grid',
      headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
      styles: { fontSize: 10 }
    });
    
    // Add GAR score visualization if we implement it later
  } else {
    doc.setFontSize(11);
    doc.text('No GAR scores available for this athlete.', 14, doc.autoTable.previous.finalY + 20);
    doc.autoTable.previous.finalY += 10;
  }
  
  // Recent Highlights Section
  doc.setFontSize(16);
  doc.text('Recent Highlights', 14, doc.autoTable.previous.finalY + 15);
  
  if (highlights && highlights.length > 0) {
    const highlightData = highlights.slice(0, 5).map(h => [
      h.title || 'Unnamed Highlight', 
      h.sportType || 'N/A',
      formatDate(new Date(h.createdAt)) || 'N/A',
      h.garScore ? h.garScore.toFixed(1) : 'N/A'
    ]);
    
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Title', 'Sport', 'Date', 'GAR Score']],
      body: highlightData,
      theme: 'grid',
      headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
      styles: { fontSize: 10 }
    });
  } else {
    doc.setFontSize(11);
    doc.text('No highlights available for this athlete.', 14, doc.autoTable.previous.finalY + 20);
    doc.autoTable.previous.finalY += 10;
  }
  
  // Recommendations Section
  doc.setFontSize(16);
  doc.text('Training Recommendations', 14, doc.autoTable.previous.finalY + 15);
  
  if (recommendations && recommendations.length > 0) {
    const recData = recommendations.slice(0, 5).map(r => [
      r.title || 'Unnamed Recommendation',
      r.description || 'No description available'
    ]);
    
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Recommendation', 'Description']],
      body: recData,
      theme: 'grid',
      headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
      styles: { fontSize: 10 }
    });
  } else {
    doc.setFontSize(11);
    doc.text('No recommendations available for this athlete.', 14, doc.autoTable.previous.finalY + 20);
  }
  
  // Footer with disclaimer
  const footerText = 'This report is generated by Go4It Sports and is intended for the athlete\'s personal use.';
  doc.setFontSize(8);
  doc.text(footerText, pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
  
  // Return the PDF as a blob
  return doc.output('blob');
};

/**
 * Generate a team report PDF with team performance data
 */
export const generateTeamPDF = async (
  teamName: string,
  coach: User,
  athletes: any[],
  teamStats: any = {}
): Promise<Blob> => {
  // Create new PDF document
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Add Go4It logo/header
  const logoHeight = 20;
  doc.setFillColor(13, 22, 40); // Dark blue background
  doc.rect(0, 0, pageWidth, 40, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(22);
  doc.text('Go4It Sports', pageWidth / 2, 20, { align: 'center' });
  doc.setFontSize(12);
  doc.text('Team Performance Report', pageWidth / 2, 30, { align: 'center' });
  
  // Reset text color for the rest of the document
  doc.setTextColor(0, 0, 0);
  
  // Add report generation date
  const today = new Date();
  doc.setFontSize(10);
  doc.text(`Report generated on ${formatDate(today)}`, pageWidth - 15, 45, { align: 'right' });
  
  // Team Information Section
  doc.setFontSize(16);
  doc.text('Team Information', 14, 60);
  doc.setFontSize(12);
  
  const teamInfo = [
    ['Team Name', teamName || 'N/A'],
    ['Coach', coach.name || 'N/A'],
    ['Sport', teamStats?.sport || 'N/A'],
    ['Season', teamStats?.season || 'N/A'],
    ['Number of Athletes', athletes.length.toString()]
  ];
  
  doc.autoTable({
    startY: 65,
    head: [['Attribute', 'Value']],
    body: teamInfo,
    theme: 'grid',
    headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
    styles: { fontSize: 10 }
  });
  
  // Team Athletes Section
  doc.setFontSize(16);
  doc.text('Team Roster', 14, doc.autoTable.previous.finalY + 15);
  
  if (athletes && athletes.length > 0) {
    const athleteData = athletes.map(a => [
      a.name || 'Unnamed Athlete',
      a.position || 'N/A',
      a.height || 'N/A',
      a.weight || 'N/A',
      a.garScore ? a.garScore.toFixed(1) : 'N/A'
    ]);
    
    doc.autoTable({
      startY: doc.autoTable.previous.finalY + 20,
      head: [['Name', 'Position', 'Height', 'Weight', 'GAR Score']],
      body: athleteData,
      theme: 'grid',
      headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
      styles: { fontSize: 10 }
    });
  } else {
    doc.setFontSize(11);
    doc.text('No athletes available for this team.', 14, doc.autoTable.previous.finalY + 20);
  }
  
  // Footer with disclaimer
  const footerText = 'This report is generated by Go4It Sports and is intended for the coach\'s personal use.';
  doc.setFontSize(8);
  doc.text(footerText, pageWidth / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
  
  // Return the PDF as a blob
  return doc.output('blob');
};