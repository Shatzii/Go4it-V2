import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import VisualBlockEditor, { Block } from './VisualBlockEditor';
import { SiteStructureManager } from './SiteStructureManager';
import { AIPromptDialog } from './AIPromptDialog';
import { neurodivergentSchoolStructure, convertToRhythm } from '../templates/NeurodivergentSchoolStructure';
import { generateNeurodivergentTemplate } from '../templates/NeurodivergentSuperheroes';
import { LivePreview } from './LivePreview';
import {
  Wand2,
  Save,
  Layout,
  Download,
  Upload,
  RefreshCw,
  PenTool,
  BookOpen,
  Users,
  School,
  Rocket,
  Brain,
  Sparkles
} from 'lucide-react';

interface NeurodivergentSchoolEditorProps {
  initialContent?: Block[];
  initialTitle?: string;
  onSave?: (content: Block[], title: string, rhythmCode: string) => void;
}

export const NeurodivergentSchoolEditor: React.FC<NeurodivergentSchoolEditorProps> = ({
  initialContent = [],
  initialTitle = 'New Neurodivergent Superheroes Page',
  onSave
}) => {
  const [blocks, setBlocks] = useState<Block[]>(initialContent);
  const [title, setTitle] = useState(initialTitle);
  const [rhythmCode, setRhythmCode] = useState('');
  const [isAIPromptOpen, setIsAIPromptOpen] = useState(false);
  const [isSiteStructureOpen, setIsSiteStructureOpen] = useState(false);
  const [activeTemplate, setActiveTemplate] = useState<'home' | 'about' | 'programs' | 'resources' | null>(null);
  const [ageGroup, setAgeGroup] = useState<'kids' | 'teens' | 'all'>('kids');
  const { toast } = useToast();

  // Generate Rhythm code whenever blocks change
  useEffect(() => {
    if (blocks.length > 0) {
      const code = convertToRhythm(blocks, title);
      setRhythmCode(code);
    }
  }, [blocks, title]);

  const handleContentChange = (newBlocks: Block[]) => {
    setBlocks(newBlocks);
  };

  const handleTemplateSelect = (template: 'home' | 'about' | 'programs' | 'resources') => {
    setActiveTemplate(template);
    const templateBlocks = generateNeurodivergentTemplate(template);
    setBlocks(templateBlocks);
    
    // Set title based on template
    switch (template) {
      case 'home':
        setTitle('Welcome to the Neurodivergent School for Superheroes');
        break;
      case 'about':
        setTitle('About Our School');
        break;
      case 'programs':
        setTitle('Our Superhero Programs');
        break;
      case 'resources':
        setTitle('Superhero Resources');
        break;
    }
    
    toast({
      title: 'Template Applied',
      description: `The ${template} template has been loaded successfully.`,
    });
  };

  const handleSave = () => {
    if (onSave) {
      onSave(blocks, title, rhythmCode);
    }
    
    toast({
      title: 'Page Saved',
      description: 'Your page has been saved successfully.',
    });
  };

  const handleAIPrompt = (prompt: string, model: string, options: any) => {
    // In a real implementation, this would send the prompt to the AI service
    toast({
      title: 'Generating Content',
      description: 'AI is generating content based on your prompt...',
    });
    
    // For demo purposes, let's pretend the AI service returned some blocks
    setTimeout(() => {
      const newBlocks: Block[] = [
        {
          id: 'ai-heading-1',
          type: 'heading',
          content: `AI Generated: ${prompt.substring(0, 30)}...`,
          settings: { level: 2, align: 'center', color: '#4C2C8A' }
        },
        {
          id: 'ai-paragraph-1',
          type: 'paragraph',
          content: 'This content was generated by AI based on your prompt. In a real implementation, this would be actual AI-generated content tailored to neurodivergent students.',
          settings: { size: 'medium' }
        },
        {
          id: 'ai-image-1',
          type: 'image',
          content: 'https://images.unsplash.com/photo-1516981879613-9f5da904015f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fHN1cGVyaGVyb3xlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60',
          settings: {
            width: '100%',
            rounded: true,
            shadow: true,
            alt: 'AI generated image based on prompt',
            caption: 'Image selected based on your prompt'
          }
        }
      ];
      
      setBlocks([...blocks, ...newBlocks]);
      
      toast({
        title: 'Content Generated',
        description: 'AI has generated content based on your prompt!',
      });
    }, 2000);
  };

  return (
    <div className="neurodivergent-school-editor">
      <div className="editor-header mb-6">
        <div className="flex flex-col md:flex-row gap-4 justify-between items-start md:items-center mb-4">
          <div className="flex-1">
            <Input
              className="text-xl font-bold"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Page Title"
            />
          </div>
          <div className="flex gap-2">
            <Button 
              onClick={() => setIsAIPromptOpen(true)}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Wand2 className="h-4 w-4" />
              <span>{ageGroup === 'kids' ? 'Magic Creator' : 'AI Generate'}</span>
            </Button>
            <Button 
              onClick={handleSave}
              className="flex items-center gap-2"
            >
              <Save className="h-4 w-4" />
              <span>Save Page</span>
            </Button>
          </div>
        </div>
        
        <div className="flex flex-col md:flex-row gap-4 justify-between items-start md:items-center">
          <div className="flex gap-2">
            <select
              className="border rounded-md p-2 text-sm"
              value={ageGroup}
              onChange={(e) => setAgeGroup(e.target.value as 'kids' | 'teens' | 'all')}
            >
              <option value="kids">Kid-friendly (Ages 5-10)</option>
              <option value="teens">Teen-friendly (Ages 11-17)</option>
              <option value="all">All ages</option>
            </select>
            <Button 
              onClick={() => setIsSiteStructureOpen(true)}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Layout className="h-4 w-4" />
              <span>{ageGroup === 'kids' ? 'Website Map' : 'Site Structure'}</span>
            </Button>
          </div>
        </div>
      </div>
      
      <Tabs defaultValue="editor" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="editor" className="flex items-center gap-2">
            <PenTool className="h-4 w-4" />
            <span>{ageGroup === 'kids' ? 'Make Your Page' : 'Page Editor'}</span>
          </TabsTrigger>
          <TabsTrigger value="templates" className="flex items-center gap-2">
            <BookOpen className="h-4 w-4" />
            <span>{ageGroup === 'kids' ? 'Quick Pages' : 'Templates'}</span>
          </TabsTrigger>
          <TabsTrigger value="preview" className="flex items-center gap-2">
            <RefreshCw className="h-4 w-4" />
            <span>{ageGroup === 'kids' ? 'See Your Page' : 'Preview'}</span>
          </TabsTrigger>
          <TabsTrigger value="code" className="flex items-center gap-2 md:inline-flex hidden">
            <Upload className="h-4 w-4" />
            <span>Rhythm Code</span>
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="editor">
          <VisualBlockEditor 
            blocks={blocks}
            onChange={handleContentChange}
            pageTitle={title}
            ageGroup={ageGroup}
          />
        </TabsContent>
        
        <TabsContent value="templates">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <Card 
              className={`cursor-pointer hover:border-primary transition-colors ${activeTemplate === 'home' ? 'border-primary ring-1 ring-primary' : ''}`}
              onClick={() => handleTemplateSelect('home')}
            >
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Rocket className="h-5 w-5 text-primary" />
                  <span>Home Page</span>
                </CardTitle>
                <CardDescription>
                  Welcoming homepage for the Neurodivergent School for Superheroes
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="aspect-video bg-gray-100 rounded-md overflow-hidden relative">
                  <img 
                    src="https://images.unsplash.com/photo-1501432377862-3d0432b87a14?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTB8fHN1cGVyaGVyb3xlbnwwfHwwfHw%3D&auto=format&fit=crop&w=800&q=60"
                    alt="Home page template preview"
                    className="object-cover h-full w-full opacity-80"
                  />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <Button size="sm">
                      {ageGroup === 'kids' ? 'Use This Page' : 'Apply Template'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card 
              className={`cursor-pointer hover:border-primary transition-colors ${activeTemplate === 'about' ? 'border-primary ring-1 ring-primary' : ''}`}
              onClick={() => handleTemplateSelect('about')}
            >
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <School className="h-5 w-5 text-primary" />
                  <span>About Page</span>
                </CardTitle>
                <CardDescription>
                  Information about the school's mission, staff, and learning environment
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="aspect-video bg-gray-100 rounded-md overflow-hidden relative">
                  <img 
                    src="https://images.unsplash.com/photo-1503676260728-1c00da094a0b?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8Y29sb3JmdWwlMjBzY2hvb2x8ZW58MHx8MHx8&auto=format&fit=crop&w=800&q=60"
                    alt="About page template preview"
                    className="object-cover h-full w-full opacity-80"
                  />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <Button size="sm">
                      {ageGroup === 'kids' ? 'Use This Page' : 'Apply Template'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card 
              className={`cursor-pointer hover:border-primary transition-colors ${activeTemplate === 'programs' ? 'border-primary ring-1 ring-primary' : ''}`}
              onClick={() => handleTemplateSelect('programs')}
            >
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="h-5 w-5 text-primary" />
                  <span>Programs Page</span>
                </CardTitle>
                <CardDescription>
                  Details about specialized programs for different neurodivergent strengths
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="aspect-video bg-gray-100 rounded-md overflow-hidden relative">
                  <img 
                    src="https://images.unsplash.com/photo-1568667256549-094345857637?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8NXx8cmVhZGluZ3xlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60"
                    alt="Programs page template preview"
                    className="object-cover h-full w-full opacity-80"
                  />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <Button size="sm">
                      {ageGroup === 'kids' ? 'Use This Page' : 'Apply Template'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card 
              className={`cursor-pointer hover:border-primary transition-colors ${activeTemplate === 'resources' ? 'border-primary ring-1 ring-primary' : ''}`}
              onClick={() => handleTemplateSelect('resources')}
            >
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-primary" />
                  <span>Resources Page</span>
                </CardTitle>
                <CardDescription>
                  Educational resources for students, families, and educators
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="aspect-video bg-gray-100 rounded-md overflow-hidden relative">
                  <img 
                    src="https://images.unsplash.com/photo-1509228627152-72ae9ae6848d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8MTd8fHBhdHRlcm58ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60"
                    alt="Resources page template preview"
                    className="object-cover h-full w-full opacity-80"
                  />
                  <div className="absolute inset-0 flex items-center justify-center">
                    <Button size="sm">
                      {ageGroup === 'kids' ? 'Use This Page' : 'Apply Template'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card 
              className="cursor-pointer hover:border-primary transition-colors"
              onClick={() => setIsAIPromptOpen(true)}
            >
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wand2 className="h-5 w-5 text-primary" />
                  <span>Custom AI Template</span>
                </CardTitle>
                <CardDescription>
                  {ageGroup === 'kids' 
                    ? 'Ask the Magic Helper to make a special page just for you!'
                    : 'Generate a custom template using AI based on your specifications'}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="aspect-video bg-gradient-to-r from-purple-200 to-blue-200 rounded-md overflow-hidden flex items-center justify-center">
                  <Button>
                    {ageGroup === 'kids' ? 'Make Magic Page' : 'Generate Template'}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
        
        <TabsContent value="preview">
          <LivePreview 
            blocks={blocks}
            title={title}
            ageGroup={ageGroup}
          />
        </TabsContent>
        
        <TabsContent value="code">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Upload className="h-5 w-5" />
                <span>Rhythm Code</span>
              </CardTitle>
              <CardDescription>
                Generated Rhythm code for the current page
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-900 text-gray-100 p-4 rounded-md font-mono text-sm overflow-auto max-h-[400px]">
                <pre>{rhythmCode || '# No Rhythm code generated yet'}</pre>
              </div>
              <div className="mt-4 flex justify-end">
                <Button 
                  variant="outline"
                  className="flex items-center gap-2"
                  onClick={() => {
                    // Copy code to clipboard
                    navigator.clipboard.writeText(rhythmCode);
                    toast({
                      title: 'Code Copied',
                      description: 'Rhythm code has been copied to clipboard.',
                    });
                  }}
                >
                  <Download className="h-4 w-4" />
                  <span>Copy Code</span>
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      <AIPromptDialog
        isOpen={isAIPromptOpen}
        onClose={() => setIsAIPromptOpen(false)}
        onSubmit={handleAIPrompt}
        ageGroup={ageGroup}
      />
      
      <SiteStructureManager
        isOpen={isSiteStructureOpen}
        onClose={() => setIsSiteStructureOpen(false)}
        onCreatePage={(page) => {
          toast({
            title: 'Page Created',
            description: `The page "${page.title}" has been created.`,
          });
        }}
        onUpdateSiteStructure={(structure) => {
          toast({
            title: 'Structure Updated',
            description: 'The site structure has been updated successfully.',
          });
        }}
        currentStructure={neurodivergentSchoolStructure}
        ageGroup={ageGroup}
      />
    </div>
  );
};