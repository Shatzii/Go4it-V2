import { NextRequest, NextResponse } from 'next/server';

interface ContentTemplate {
  id: string;
  name: string;
  category: string;
  description: string;
  template: string;
  variables: string[];
  aiModel?: string;
  outputFormat?: string;
}

const CONTENT_TEMPLATES: ContentTemplate[] = [
  {
    id: 'athlete-profile',
    name: 'Athlete Profile',
    category: 'marketing',
    description: 'Generate comprehensive athlete profile content',
    template: `# {athleteName} - {sport} Athlete Profile

## Personal Information
- **Name**: {athleteName}
- **Age**: {age}
- **Location**: {location}
- **Sport**: {sport}
- **Position**: {position}

## Athletic Achievements
{achievements}

## Academic Information
- **School**: {school}
- **GPA**: {gpa}
- **Intended Major**: {major}

## Athletic Statistics
{statistics}

## Personal Statement
{personalStatement}

## Contact Information
For recruitment inquiries, please contact Go4it Sports Academy at info@go4itsports.org

---
*Profile generated by Go4it Sports Academy AI - Train Here. Place Anywhere.*
`,
    variables: ['athleteName', 'age', 'location', 'sport', 'position', 'achievements', 'school', 'gpa', 'major', 'statistics', 'personalStatement'],
    aiModel: 'gpt-4',
    outputFormat: 'markdown'
  },
  {
    id: 'event-announcement',
    name: 'Event Announcement',
    category: 'marketing',
    description: 'Create compelling event announcements',
    template: `# 🏆 {eventName} - {eventType}

## Event Details
- **Date**: {eventDate}
- **Location**: {venue}, {city}
- **Time**: {eventTime}
- **Capacity**: {capacity} athletes

## What to Expect
{eventDescription}

## Key Features
{eventFeatures}

## Registration Information
- **Early Bird Deadline**: {earlyBirdDeadline}
- **Regular Registration**: {regularDeadline}
- **Cost**: {cost}

## Why Attend?
{benefits}

## Schedule Overview
{schedule}

## Featured Speakers/Coaches
{speakers}

## Contact & Registration
📧 **Email**: events@go4itsports.org
📱 **Phone**: +1-555-GO4-IT
🌐 **Website**: [Register Now]({registrationUrl})

*#Go4itSports #TrainHerePlaceAnywhere*
`,
    variables: ['eventName', 'eventType', 'eventDate', 'venue', 'city', 'eventTime', 'capacity', 'eventDescription', 'eventFeatures', 'earlyBirdDeadline', 'regularDeadline', 'cost', 'benefits', 'schedule', 'speakers', 'registrationUrl'],
    aiModel: 'gpt-4',
    outputFormat: 'markdown'
  },
  {
    id: 'social-media-post',
    name: 'Social Media Post',
    category: 'social',
    description: 'Generate engaging social media content',
    template: `🚀 {hook}

{body}

{callToAction}

#{hashtags}

[Link in bio 🔗]
---
Go4it Sports Academy | Train Here. Place Anywhere.`,
    variables: ['hook', 'body', 'callToAction', 'hashtags'],
    aiModel: 'gpt-3.5-turbo',
    outputFormat: 'text'
  },
  {
    id: 'email-newsletter',
    name: 'Email Newsletter',
    category: 'communication',
    description: 'Create professional newsletter content',
    template: `Subject: {subject}

Dear {recipientName},

{introduction}

{body}

{callToAction}

Best regards,
The Go4it Sports Academy Team

---
Go4it Sports Academy
Train Here. Place Anywhere.
info@go4itsports.org
+1-555-GO4-IT`,
    variables: ['subject', 'recipientName', 'introduction', 'body', 'callToAction'],
    aiModel: 'gpt-4',
    outputFormat: 'text'
  },
  {
    id: 'sponsor-proposal',
    name: 'Sponsor Proposal',
    category: 'business',
    description: 'Generate professional sponsorship proposals',
    template: `# Sponsorship Proposal: {sponsorName} × Go4it Sports Academy

## Executive Summary
{proposalSummary}

## Partnership Overview
- **Sponsor**: {sponsorName}
- **Event/Activity**: {eventName}
- **Duration**: {duration}
- **Target Audience**: {targetAudience}

## Sponsorship Benefits
{benefits}

## Marketing Opportunities
{marketingOpportunities}

## Investment Structure
{investmentStructure}

## Success Metrics
{successMetrics}

## Next Steps
{nextSteps}

## Contact Information
- **Primary Contact**: {contactName}
- **Email**: {contactEmail}
- **Phone**: {contactPhone}

---
*Proposal generated by Go4it Sports Academy AI*
*Confidential - For {sponsorName} Review Only*`,
    variables: ['sponsorName', 'proposalSummary', 'eventName', 'duration', 'targetAudience', 'benefits', 'marketingOpportunities', 'investmentStructure', 'successMetrics', 'nextSteps', 'contactName', 'contactEmail', 'contactPhone'],
    aiModel: 'gpt-4',
    outputFormat: 'markdown'
  }
];

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const category = searchParams.get('category');

  let templates = CONTENT_TEMPLATES;
  if (category) {
    templates = templates.filter(t => t.category === category);
  }

  return NextResponse.json({
    success: true,
    templates: templates.map(t => ({
      id: t.id,
      name: t.name,
      category: t.category,
      description: t.description,
      variables: t.variables
    }))
  });
}

export async function POST(request: NextRequest) {
  try {
    const { templateId, variables, enhanceWithAI = true, options = {} } = await request.json();

    if (!templateId || !variables) {
      return NextResponse.json(
        { error: 'Missing required parameters: templateId and variables' },
        { status: 400 }
      );
    }

    const template = CONTENT_TEMPLATES.find(t => t.id === templateId);
    if (!template) {
      return NextResponse.json(
        { error: `Template not found: ${templateId}` },
        { status: 404 }
      );
    }

    // Validate required variables
    const missingVars = template.variables.filter(v => !variables[v]);
    if (missingVars.length > 0) {
      return NextResponse.json(
        { error: `Missing required variables: ${missingVars.join(', ')}` },
        { status: 400 }
      );
    }

    let content = template.template;

    // Replace variables in template
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`\\{${key}\\}`, 'g');
      content = content.replace(regex, String(value));
    });

    // Enhance with AI if requested
    if (enhanceWithAI) {
      content = await enhanceContentWithAI(content, template, variables, options);
    }

    return NextResponse.json({
      success: true,
      template: templateId,
      content,
      format: template.outputFormat,
      enhanced: enhanceWithAI,
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Content generation error:', error);
    return NextResponse.json(
      { error: 'Internal server error during content generation' },
      { status: 500 }
    );
  }
}

async function enhanceContentWithAI(
  content: string,
  template: ContentTemplate,
  variables: Record<string, any>,
  options: any
): Promise<string> {
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
  if (!OPENAI_API_KEY) {
    console.warn('OpenAI API key not configured, returning unenhanced content');
    return content;
  }

  const model = template.aiModel || 'gpt-3.5-turbo';

  let enhancementPrompt = '';

  switch (template.category) {
    case 'marketing':
      enhancementPrompt = `Enhance this marketing content to be more engaging and compelling. Make it more persuasive while maintaining professionalism. Improve the language, add emotional appeal, and ensure it drives action.`;
      break;

    case 'social':
      enhancementPrompt = `Optimize this social media post for maximum engagement. Make it more concise, add relevant emojis, improve the hook, and ensure it encourages interaction.`;
      break;

    case 'communication':
      enhancementPrompt = `Polish this communication content. Improve the tone, clarity, and professionalism. Ensure it's well-structured and achieves its communication goals.`;
      break;

    case 'business':
      enhancementPrompt = `Enhance this business content to be more professional and compelling. Strengthen the value proposition, improve the structure, and make it more persuasive for business decision-makers.`;
      break;

    default:
      enhancementPrompt = `Improve this content by making it more engaging, clear, and effective for its intended purpose.`;
  }

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model,
        messages: [
          {
            role: 'system',
            content: `You are a content enhancement AI specializing in sports marketing and athlete development. ${enhancementPrompt} Maintain the original structure and key information while significantly improving quality and effectiveness.`
          },
          {
            role: 'user',
            content: `Please enhance the following content:\n\n${content}`
          }
        ],
        temperature: options.temperature || 0.7,
        max_tokens: options.maxTokens || 2000,
      }),
    });

    if (response.ok) {
      const data = await response.json();
      return data.choices[0]?.message?.content || content;
    }
  } catch (error) {
    console.error('AI enhancement failed:', error);
  }

  return content; // Return original content if AI enhancement fails
}