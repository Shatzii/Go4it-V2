/**
 * Learning Profile API Routes
 * 
 * These routes handle all learning profile and assessment related operations,
 * providing a REST API for clients to interact with the Learning Profile Management System.
 */

import { Router } from 'express';
import * as LearningProfileService from '../services/learning-profile-service';
import { insertLearningProfileSchema, insertAssessmentResultSchema } from '@shared/schema';
import { z } from 'zod';

const router = Router();

/**
 * Get a user's learning profile
 * GET /api/learning-profiles/:userId
 */
router.get('/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    
    const profile = await LearningProfileService.getLearningProfile(userId);
    
    if (!profile) {
      return res.status(404).json({ error: 'Learning profile not found' });
    }
    
    res.json(profile);
  } catch (error) {
    console.error('Error fetching learning profile:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * Create a new learning profile
 * POST /api/learning-profiles
 */
router.post('/', async (req, res) => {
  try {
    const validatedData = insertLearningProfileSchema.parse(req.body);
    const profile = await LearningProfileService.createLearningProfile(validatedData);
    res.status(201).json(profile);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ error: error.errors });
    }
    console.error('Error creating learning profile:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * Update a learning profile
 * PATCH /api/learning-profiles/:userId
 */
router.patch('/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    
    // Validate the update data (partial validation)
    const validatedData = insertLearningProfileSchema.partial().parse(req.body);
    
    // Update the profile
    const updatedProfile = await LearningProfileService.updateLearningProfile(userId, validatedData);
    
    if (!updatedProfile) {
      return res.status(404).json({ error: 'Learning profile not found' });
    }
    
    res.json(updatedProfile);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ error: error.errors });
    }
    console.error('Error updating learning profile:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * Generate a profile from assessments
 * POST /api/learning-profiles/:userId/generate
 */
router.post('/:userId/generate', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    
    const profile = await LearningProfileService.generateProfileFromAssessments(userId);
    res.json(profile);
  } catch (error) {
    console.error('Error generating learning profile:', error);
    
    // Specific error for no assessments
    if (error instanceof Error && error.message.includes('No assessments found')) {
      return res.status(400).json({ 
        error: 'Cannot generate profile without assessments',
        message: 'User must complete required assessments first'
      });
    }
    
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * Get all assessment results for a user
 * GET /api/learning-profiles/:userId/assessments
 */
router.get('/:userId/assessments', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    
    // Get type filter if provided
    const type = req.query.type?.toString();
    
    const assessments = await LearningProfileService.getAssessmentResultsByUser(
      userId, 
      type as any // The service will handle validation
    );
    
    res.json(assessments);
  } catch (error) {
    console.error('Error fetching assessment results:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * Save a new assessment result
 * POST /api/learning-profiles/:userId/assessments
 */
router.post('/:userId/assessments', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    
    // Validate and merge with userId
    const validatedData = insertAssessmentResultSchema.parse({
      ...req.body,
      userId
    });
    
    // Save the assessment
    const assessment = await LearningProfileService.saveAssessmentResult(validatedData);
    
    res.status(201).json(assessment);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ error: error.errors });
    }
    console.error('Error saving assessment result:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

/**
 * Check if a user has completed all required assessments
 * GET /api/learning-profiles/:userId/assessments/status
 */
router.get('/:userId/assessments/status', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    if (isNaN(userId)) {
      return res.status(400).json({ error: 'Invalid user ID' });
    }
    
    const isComplete = await LearningProfileService.hasCompletedAllRequiredAssessments(userId);
    
    res.json({
      userId,
      isComplete,
      message: isComplete 
        ? 'All required assessments completed'
        : 'User has not completed all required assessments'
    });
  } catch (error) {
    console.error('Error checking assessment status:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;